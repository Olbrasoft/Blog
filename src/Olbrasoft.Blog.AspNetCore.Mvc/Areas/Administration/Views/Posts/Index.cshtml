@model PostViewModel
@{
    ViewData["Title"] = "Index";
    Layout = "~/Areas/Administration/Views/Shared/_Layout.cshtml";
}

<div class="d-sm-flex align-items-center justify-content-between mb-4">
    <h1 class="h3 mb-0 text-gray-800" localize>Posts</h1>
</div>

<div class="row">
    <div class="col-lg-12">

        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary" localize>Add new post</h6>
            </div>
            <div class="card-body">
                <form asp-area="Administration" asp-controller="Posts" asp-action="Save" method="post" role="form">
                    <div asp-validation-summary="All" class="text-danger"></div>
                    <input id="id" asp-for="Id" type="hidden">
                    <div class="form-group">
                        <label localize>Title</label>
                        <input autofocus="autofocus" id="post-title" asp-for="Title" class="form-control ">
                        <p class="help-block"><span id="remaingCharacters">@Model.MaxLength</span> Character(s) Remaining </p>
                        <span asp-validation-for="Title" class="text-danger"></span>
                    </div>

                    <div class="form-group">
                        <label localize>Category</label>
                        <select class="form-control" asp-for="CategoryId" asp-items="@(new SelectList(Model.Categories, "Id", "Name", Model.CategoryId))">
                            <option value="" localize>Select category please</option>
                        </select>
                        <span asp-validation-for="CategoryId" class="text-danger"></span>
                    </div>

                    <div class="form-group">
                        <label localize>Tags</label>
                        <input id="post-tags" class="form-control" asp-for="TagIds" />
                    </div>

                    <div class="form-group">

                        <label localize>Content</label>
                        <textarea rows="50" class="form-control" asp-for="Content" id="post-content"></textarea>

                        <span asp-validation-for="Content" class="text-danger"></span>
                    </div>
                    <button type="submit" id="save-content" class="btn btn-primary" localize>Save</button>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-lg-12">

        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary" localize>Your posts</h6>
            </div>
            <div class="card-body">

                <table class="table table-striped table-bordered table-hover" id="your-posts">
                    <thead>
                        <tr>
                            <th localize>Title</th>
                            <th localize>Category</th>
                            <th localize>Created</th>
                            <th localize>Actions</th>
                        </tr>
                    </thead>
                </table>
            </div>
        </div>
    </div>
</div>

@section css{

    <link rel="stylesheet" href="~/css/mditor.min.css" />
    <link rel="stylesheet" href="~/vendor/bootstrap/css/bootstrap-tagsinput.css">
    <link rel="stylesheet" href="~/css/typeahead.css">
    <style>
        .panel-heading {
            border-top: 1px solid transparent;
        }

        .panel {
            border-top: 0px solid transparent !important;
        }

        .focus {
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
            border-color: #1cc88a;
        }

        .bootstrap-tagsinput {
            width: 100% !important;
        }
    </style>

}

    @section scripts {

    <script src="~/js/mditor.min.js"></script>
    @*<script src="https://unpkg.com/mditor@1.1.1/dist/js/mditor.min.js"></script>*@
    <script src="~/js/typeahead.bundle.js"></script>
    <script src="~/vendor/bootstrap/js/bootstrap-tagsinput.min.js" asp-append-version="true"></script>
    <script src="~/js/momentjs/moment.min.js" asp-append-version="true"></script>
    <script src="~/js/datetime-moment/datetime-moment.js" asp-append-version="true"></script>

    <script>

        var mditor = new Mditor("#post-content", {
            height: 433,
            fixedHeight: true,

        });
        mditor.openPreview();

        var textlen

        $('#post-title').keyup(function () {
            textlen = @Model.MaxLength - $(this).val().length;
            $('#remaingCharacters').text(textlen);
        });

        var tags = new Bloodhound({

            datumTokenizer: function (d) {
                return Bloodhound.tokenizers.whitespace(d.value);
            },
            queryTokenizer: Bloodhound.tokenizers.whitespace,
            item: '<li class="dropdown-item"><a class="dropdown-item" href="#" role="option"></a></li>',
            remote: {
                'cache': false,
                url: '/Administration/Tags/FindTags',
                replace: function (url, uriEncodedQuery) {

                    $('.tt-hint').css('background-image', 'url("/Images/GearLoadingSmall.gif")');
                    $('.tt-hint').css('background-repeat', 'no-repeat');

                    val = $('#post-tags').val();
                    result = url + '?term=' + uriEncodedQuery;

                    if (!val) return result;

                    return result + '&values=' + val;

                },

                filter: function (data) {
                    $('.tt-hint').css('background-image', '');
                    return data;
                }
            }
        });

        tags.initialize();

        var elt = $('#post-tags');
        elt.tagsinput({
            itemValue: 'value',
            itemText: 'text',
            typeaheadjs: {
                name: 'tags',
                displayKey: 'text',
                source: tags.ttAdapter(),
            }
        });

        @foreach (var tag in Model.Tags)
        {
            @:elt.tagsinput('add', { "value": "@tag.Id", "text": "@tag.Label" });
        }

            $(() => {
                $.fn.dataTable.moment("DD/MM/YYYY HH:mm:ss");
                $.fn.dataTable.moment("DD/MM/YYYY");

                $("#your-posts").DataTable({
                    // Design Assets
                    stateSave: true,
                    autoWidth: true,
                    // ServerSide Setups
                    processing: true,
                    serverSide: true,
                    // Paging Setups
                    paging: true,
                    // Searching Setups
                    searching: { regex: true },
                    searchable: true,
                    // Ajax Filter
                    ajax: {
                        url: "/Administration/Posts/CurrentUserPosts",
                        type: "POST",
                        contentType: "application/json",
                        dataType: "json",
                        data: function (d) {
                            return JSON.stringify(d);
                        }
                    },
                    language: {
                        processing: "<img src='/Images/GearLoading.gif'>",
                        emptyTable: "No data available in table"
                    },
                    // Columns Setups
                    columns: [
                        { data: "title" },
                        { data: "categoryName" },

                        {
                            data: "created",
                            render: function (data, type, row) {
                                // If display or filter data is requested, format the date
                                if (type === "display" || type === "filter") {
                                    return moment(data).format("ddd DD/MM/YYYY HH:mm:ss");
                                }
                                // Otherwise the data type requested (`type`) is type detection or
                                // sorting data, for which we want to use the raw date value, so just return
                                // that, unaltered
                                return data;
                            }
                        }
                    ],
                    // Column Definitions
                    columnDefs: [
                        { "name": "Title", "targets": 0 },
                        { "name": "CategoryName", "targets": 1, "orderable": false },
                        { "name": "Created", "targets": 2 },
                        {
                            "targets": 3, "data": "id", "className": "dt-body-right", "render": function (data, type, full, meta) {
                                return '<a  href=/Administration/Posts/Index/' + data + '><i class="fa fa-pencil" aria-hidden="true"></i> Edit</a>'

                            }
                        },

                        { "searchable": true, "targets": 0 },
                        { targets: "no-sort", orderable: false },
                        { targets: "no-search", searchable: false },
                        {
                            targets: "trim",
                            render: function (data, type, full, meta) {
                                if (type === "display") {
                                    data = strtrunc(data, 10);
                                }

                                return data;
                            }
                        },
                        { targets: "date-type", type: "date-eu" }
                    ]
                });
            });
    </script>

}