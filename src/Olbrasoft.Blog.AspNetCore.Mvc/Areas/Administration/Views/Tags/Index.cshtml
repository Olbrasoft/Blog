@using Microsoft.AspNetCore.Localization
@model TagViewModel

@inject IHtmlLocalizer<SharedResources> _localizer
@inject IHtmlLocalizer<AdminSharedResource> _adminLocalizer
@{
    ViewData["Title"] = "Index";
    Layout = "~/Areas/Administration/Views/Shared/_Layout.cshtml";
}
<div class="d-sm-flex align-items-center justify-content-between mb-4">
    <h1 class="h3 mb-0 text-gray-800"><localize localizer="@_localizer">Tags</localize></h1>
</div>
<div class="row">
    <div class="col-lg-12">
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Tag information</h6>
            </div>
            <div class="card-body">
                <form asp-area="Administration" asp-controller="Tags" asp-action="Save" method="post" role="form">
                    <div asp-validation-summary="All" class="text-danger"></div>
                    <input id="id" asp-for="Id" type="hidden">
                    <div class="form-group">
                        <label>Label</label>
                        <input autofocus="autofocus" id="label" asp-for="Label" class="form-control">
                        <p class="help-block"><span id="remaingCharacters">@Model.MaxLength</span> Character(s) Remaining </p>
                        <span asp-validation-for="Label" class="text-danger"></span>
                    </div>
                    <button type="submit" id="save-content" class="btn btn-primary float-right">Save</button>
                </form>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <!-- Content Column -->
    <div class="col-lg-6 mb-4">
        <!-- Project Card Example -->
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary" localize>Your tags</h6>
            </div>
            <div class="card-body">
                <table class="table table-striped table-bordered table-hover" id="your-tags">
                    <thead>
                        <tr>
                            <th localize>Label</th>
                            <th><localize localizer="@_adminLocalizer">Created</localize></th>
                            <th><localize localizer="@_adminLocalizer">Actions</localize></th>
                        </tr>
                    </thead>
                </table>
            </div>
        </div>
    </div>
    <div class="col-lg-6 mb-4">
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary" localize>Other users' tags</h6>
            </div>
            <div class="card-body">
                <table class="table table-striped table-bordered table-hover" id="other-users-tags">
                    <thead>
                        <tr>
                            <th localize>Label</th>
                            <th><localize localizer="@_adminLocalizer">Creator</localize></th>
                            <th><localize localizer="@_adminLocalizer">Created</localize></th>
                        </tr>
                    </thead>
                </table>
            </div>
        </div>
    </div>

</div>

@section scripts {
    <script src="~/js/momentjs/moment.min.js" asp-append-version="true"></script>
    <script src="~/js/datetime-moment/datetime-moment.js" asp-append-version="true"></script>

  


    <script type="text/javascript">

        function onDeleteClick(confirmText, id) {

            var table = $("#your-tags").DataTable()
            var rowIndex;

            table.rows().every(function (rowIdx, tableLoop, rowLoop) {
                if (this.data().id === id) {
                    rowIndex = rowIdx;
                    return;
                }
            });

            var confirmDelete = confirm(confirmText);

            if (confirmDelete) {
                $.ajax({
                    type: "Delete",
                    url: '@Url.Action("Delete","Tags" ,  new { Area = "Administration" })',
                    data: { tagId: id },
                    success: function () {
                        table.row(rowIndex).remove().draw(true);
                    },
                    error: function (data) {
                        alert("Error: " + id);
                    }
                });
            };

            return false;
        }

        var textlen

        $('#label').keyup(function () {
            textlen = @Model.MaxLength - $(this).val().length;
            $('#remaingCharacters').text(textlen);
        });

        $(() => {
            $.fn.dataTable.moment("DD/MM/YYYY HH:mm:ss");
            $.fn.dataTable.moment("DD/MM/YYYY");

            $("#your-tags").DataTable({

                order: [[1, 'desc']],
                // Design Assets
                stateSave: true,
                autoWidth: true,
                // ServerSide Setups
                processing: true,
                serverSide: true,
                // Paging Setups
                paging: true,
                // Searching Setups
                searching: { regex: true },
                searchable: true,
                // Ajax Filter
                ajax: {
                    url: "/Administration/Tags/CurrentUserTags",
                    type: "POST",
                    contentType: "application/json",
                    dataType: "json",
                    data: function (d) {
                        return JSON.stringify(d);
                    }
                },
                language: {
                    processing: "<img src='/Images/GearLoading.gif'>",
                    emptyTable: "No data available in table"
                },
                // Columns Setups
                columns: [
                    { data: "label" },
                    {
                        data: "created",
                        render: function (data, type, row) {
                            // If display or filter data is requested, format the date
                            if (type === "display" || type === "filter") {
                                return moment(data).format("DD/MM/YYYY HH:mm:ss");
                            }
                            // Otherwise the data type requested (`type`) is type detection or
                            // sorting data, for which we want to use the raw date value, so just return
                            // that, unaltered
                            return data;
                        }
                    }
                ],
                // Column Definitions
                columnDefs: [
                    { "name": "Label", "targets": 0 },
                    { "name": "Created", "targets": 1, "className": "dt-body-right" },
                    {
                        "targets": 2, "data": "id", "className": "dt-body-right", "render": function (data, type, full, meta) {
                            var result = '<a  href=/Administration/Tags/Index/' + data + ' title="@_localizer.GetString("Edit")"  ><i class="fa fa-pencil fa-fw" aria-hidden="true"></i>@_localizer.GetString("Edit")</a>'

                            if (full.postCount === 0) {
                                var confirmText = "'@_localizer.GetString("Are you sure you wish to delete"): " + full.label + "'"
                                result += ' | <a onclick="return onDeleteClick(' + confirmText + ',' + full.id + ');"  href="#" title="@_localizer.GetString("Delete")"  ><i class="fa fa-trash fa-fw" aria-hidden="true"></i>@_localizer.GetString("Delete")</a>'
                            }

                            return result;
                        }
                    },
                    { "searchable": true, "targets": 0 },
                    { targets: "no-sort", orderable: false },
                    { targets: "no-search", searchable: false },
                    {
                        targets: "trim",
                        render: function (data, type, full, meta) {
                            if (type === "display") {
                                data = strtrunc(data, 10);
                            }

                            return data;
                        }
                    },
                    { targets: "date-type", type: "date-eu" }
                ],
                language: dataTableLanguage

        });

        $("#other-users-tags").DataTable({

            order: [[1, 'desc']],
            // Design Assets
            stateSave: true,
            autoWidth: true,
            // ServerSide Setups
            processing: true,
            serverSide: true,
            // Paging Setups
            paging: true,
            // Searching Setups
            searching: { regex: true },
            searchable: true,
            // Ajax Filter
            ajax: {
                url: "/Administration/Tags/OtherUsersTags",
                type: "POST",
                contentType: "application/json",
                dataType: "json",
                data: function (d) {
                    return JSON.stringify(d);
                }
            },
            language: {
                processing: "<img src='/Images/GearLoading.gif'>",
                emptyTable: "No data available in table"
            },
            // Columns Setups
            columns: [
                { data: "label" },
                { data: "creator" },
                {
                    data: "created",
                    render: function (data, type, row) {
                        // If display or filter data is requested, format the date
                        if (type === "display" || type === "filter") {
                            return moment(data).format("DD/MM/YYYY HH:mm:ss");
                        }
                        // Otherwise the data type requested (`type`) is type detection or
                        // sorting data, for which we want to use the raw date value, so just return
                        // that, unaltered
                        return data;
                    }
                }
            ],
            // Column Definitions
            columnDefs: [
                { "name": "Label", "targets": 0 },
                { "name": "Creator", "targets": 2, "orderable": false },
                { "name": "Created", "targets": 1 },
                { "searchable": true, "targets": 0 },
                { targets: "no-sort", orderable: false },
                { targets: "no-search", searchable: false },
                {
                    targets: "trim",
                    render: function (data, type, full, meta) {
                        if (type === "display") {
                            data = strtrunc(data, 10);
                        }

                        return data;
                    }
                },
                { targets: "date-type", type: "date-eu" }
                ],
                language: dataTableLanguage
           

                    });
                });
    </script>
}